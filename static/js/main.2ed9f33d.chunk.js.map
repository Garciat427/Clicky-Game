{"version":3,"sources":["components/CardBody.js","components/SubComponents/NavBar.js","components/MainPage.js","App.js","index.js"],"names":["CardBody","props","className","onClick","handleIncrement","id","alt","src","image","NavBar","href","MainPage","state","characters","gameItt","gameStatus","selChar","filter","character","count","length","forEach","element","temporaryValue","randomIndex","currentIndex","Math","floor","random","setState","this","map","key","name","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"0uFAmBeA,MAdf,SAAkBC,GAChB,OACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,0BAA0BC,QAAS,kBAAMF,EAAMG,gBAAgBH,EAAMI,MAElF,yBAAKH,UAAU,sBACb,yBAAKA,UAAU,SAASI,IAAI,GAAGC,IAAKN,EAAMO,Y,OCMrCC,MAZf,WACE,OACC,6BACG,yBAAKP,UAAU,aACZ,yBAAKA,UAAU,eACZ,uBAAGQ,KAAK,KAAKR,UAAU,qBAAvB,mBCsGGS,E,2MApGbC,MAAQ,CACNC,c,EAEFC,QAAU,E,EACVC,WAAa,gC,EAGbX,gBAAkB,SAAAC,GAGhB,IAAMW,EAAU,EAAKJ,MAAMC,WAAWI,QAAO,SAAAC,GAAS,OAAIA,EAAUb,KAAOA,KAElD,IAArBW,EAAQ,GAAGG,OAEb,EAAKL,UAGD,EAAKA,UAAYD,EAAWO,QAC9B,EAAKL,WAAa,8DAGlBF,EAAWQ,SAAQ,SAAAC,GACjBA,EAAQH,MAAQ,KAGlB,EAAKL,QAAU,GAGf,EAAKC,WAAa,kBAAoBF,EAAWO,OAAS,EAAKN,SAAW,UAI5EE,EAAQ,GAAGG,UAIX,EAAKJ,WAAa,yDAGlBF,EAAWQ,SAAQ,SAAAC,GACjBA,EAAQH,MAAQ,KAGlB,EAAKL,QAAU,GAQjB,IAJA,IACIS,EACAC,EAFAC,EAAeZ,EAAWO,OAIvB,IAAMK,GAGXD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GAIzCF,EAAiBV,EAHjBY,GAAgB,GAIhBZ,EAAWY,GAAgBZ,EAAWW,GACtCX,EAAWW,GAAeD,EAK5B,EAAKM,SAAS,CAAEhB,gB,wEAKR,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKX,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,sBACb,yIACA,4BAAK4B,KAAKf,cAGd,yBAAKb,UAAU,OACd4B,KAAKlB,MAAMC,WAAWkB,KAAI,SAAAb,GAAS,OAClC,kBAAC,EAAD,CAEAd,gBAAiB,EAAKA,gBAEtBC,GAAIa,EAAUb,GACd2B,IAAKd,EAAUb,GACf4B,KAAMf,EAAUe,KAChBzB,MAAOU,EAAUV,kB,GA5FN0B,IAAMC,WCHdC,MAJf,WACE,OAAO,kBAAC,EAAD,OCATC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.2ed9f33d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// If we want a child component to update or pass data to its parent, we can create a method inside the parent for the update\r\n// Then bind the method to the parent, and pass it to the child as a prop\r\n\r\nfunction CardBody(props) {\r\n  return (\r\n    <div className=\"col s12 m2\">\r\n      <div className=\"card blue-grey darken-1\" onClick={() => props.handleIncrement(props.id)}>\r\n        \r\n        <div className=\"card-image img-div\">\r\n          <img className=\"setPos\" alt=\"\" src={props.image}></img>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardBody;\r\n","import React from \"react\";\r\n\r\n// If we want a child component to update or pass data to its parent, we can create a method inside the parent for the update\r\n// Then bind the method to the parent, and pass it to the child as a prop\r\n\r\nfunction NavBar() {\r\n  return (\r\n   <nav>\r\n      <div className=\"container\">\r\n         <div className=\"nav-wrapper\">\r\n            <a href=\"#%\" className=\"brand-logo center\">Clicky Game</a>\r\n         </div>\r\n      </div>\r\n   </nav>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\n//Main Components\r\nimport CardBody from \"./CardBody\";\r\nimport characters from \"./friends.json\"\r\n\r\n//Sub Components\r\nimport NavBar from \"./SubComponents/NavBar\";\r\n\r\n// By extending the React.Component class, Counter inherits functionality from it\r\nclass MainPage extends React.Component {\r\n  // Setting the initial state of the Counter component\r\n  state = {\r\n    characters\r\n  };\r\n  gameItt = 0;\r\n  gameStatus = \"Press any Character to Start!\";\r\n\r\n  // handleIncrement increases this.state.count by 1\r\n  handleIncrement = id => {\r\n     \r\n    //Select the character from the Array based on clicked charId\r\n    const selChar = this.state.characters.filter(character => character.id === id);\r\n\r\n    if (selChar[0].count === 0) { //If the selected character is still count 0 (Correct)\r\n      //increase Game Itteration by 1\r\n      this.gameItt++\r\n\r\n      //Setting Game Status\r\n      if (this.gameItt === characters.length){\r\n        this.gameStatus = \"Congrats! You Win! Press any Character to restart the game!\";\r\n        \r\n        //resetGame\r\n        characters.forEach(element => {\r\n          element.count = 0; \r\n        });\r\n        //Set Game Itteration back to 0\r\n        this.gameItt = 0;\r\n\r\n      } else {\r\n        this.gameStatus = \"Correct! only \" + (characters.length - this.gameItt) + \" to go!\"\r\n      }\r\n      \r\n      //Increase Sel Char count by 1\r\n      selChar[0].count++\r\n      \r\n      \r\n    } else {\r\n      this.gameStatus = \"Sorry wrong choice! Press any Character to try again:(\"\r\n      \r\n      //reset Game\r\n      characters.forEach(element => {\r\n        element.count = 0; \r\n      });\r\n      //Set Game Itteration back to 0\r\n      this.gameItt = 0;\r\n    }\r\n\r\n    //Randomize Array\r\n    let currentIndex = characters.length;\r\n    let temporaryValue;\r\n    let randomIndex;\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = characters[currentIndex];\r\n      characters[currentIndex] = characters[randomIndex];\r\n      characters[randomIndex] = temporaryValue;\r\n    }\r\n      \r\n\r\n    //set state to new Shuffled characters array\r\n    this.setState({ characters });\r\n    \r\n  };\r\n\r\n  // The render method returns the JSX that should be rendered\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar />\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col s12 m12 center\">\r\n              <h4>The goal of this game is to click all the characters only once. If you click a character twice, you lose!</h4>\r\n              <h3>{this.gameStatus}</h3>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n          {this.state.characters.map(character => (\r\n            <CardBody\r\n            //count={character.count}\r\n            handleIncrement={this.handleIncrement}\r\n\r\n            id={character.id}\r\n            key={character.id}\r\n            name={character.name}\r\n            image={character.image}\r\n            />\r\n          ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\r\nimport MainPage from \"./components/MainPage\";\r\n\r\nfunction App() {\r\n  return <MainPage />;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}